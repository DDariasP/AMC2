package uhu.amc2;

import edu.uci.ics.jung.visualization.VisualizationViewer;
import java.io.File;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Menú principal con las opciones de la app.
 *
 * @author diego
 */
public class Menu extends JFrame {

    public static String fileName;
    public static File file;
    public static IProceso automata;
    public static String cadena;

    /**
     * Constructor que inicializa los elementos del menú.
     */
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonOpcion1 = new javax.swing.JButton();
        botonOpcion2 = new javax.swing.JButton();
        botonOpcion3 = new javax.swing.JButton();
        botonOpcion4 = new javax.swing.JButton();
        botonOpcion5 = new javax.swing.JButton();
        labelTitulo = new javax.swing.JLabel();
        labelArchivo = new javax.swing.JLabel();
        labelCadena = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        botonOpcion1.setText("1) Crear un autómata");
        botonOpcion1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonOpcion1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpcion1ActionPerformed(evt);
            }
        });

        botonOpcion2.setText("2) Cargar un autómata");
        botonOpcion2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonOpcion2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpcion2ActionPerformed(evt);
            }
        });

        botonOpcion3.setText("3) Introducir una cadena");
        botonOpcion3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonOpcion3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpcion3ActionPerformed(evt);
            }
        });

        botonOpcion4.setText("4) Reconocer cadena");
        botonOpcion4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonOpcion4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpcion4ActionPerformed(evt);
            }
        });

        botonOpcion5.setText("5) Reconocer cadena paso a paso");
        botonOpcion5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonOpcion5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpcion5ActionPerformed(evt);
            }
        });

        labelTitulo.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        labelTitulo.setText("AFD y AFND");

        labelArchivo.setText("Autómata cargado:");

        labelCadena.setText("Cadena cargada:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCadena, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelTitulo)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(botonOpcion2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(botonOpcion3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(botonOpcion5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(botonOpcion4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(botonOpcion1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(0, 40, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(labelTitulo)
                .addGap(34, 34, 34)
                .addComponent(labelArchivo)
                .addGap(18, 18, 18)
                .addComponent(labelCadena)
                .addGap(27, 27, 27)
                .addComponent(botonOpcion1)
                .addGap(18, 18, 18)
                .addComponent(botonOpcion2)
                .addGap(18, 18, 18)
                .addComponent(botonOpcion3)
                .addGap(18, 18, 18)
                .addComponent(botonOpcion4)
                .addGap(18, 18, 18)
                .addComponent(botonOpcion5)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Introducir un autómata desde teclado.
     *
     * @param evt Acción sobre el botón.
     */
    private void botonOpcion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpcion1ActionPerformed
        try {
            //tipo
            int tipo = Data.leerTipo(this);
            //estados
            ArrayList<Estado> listaE = Data.leerEstados(this);
            //inicial
            Estado inicial = Data.leerInicial(this, listaE);
            //finales
            Data.leerFinales(this, listaE);
            //transiciones
            ArrayList<Transicion> listaT;
            ArrayList<Transicion> listaL;
            //crear el autómata
            switch (tipo) {
                case 0:
                    listaT = Data.leerTransicionesAFD(this, listaE);
                    automata = new AFD(inicial, listaE, listaT);
                    labelArchivo.setText("Autómata cargado: AFD");
                    break;
                case 1:
                    listaT = Data.leerTransicionesAFND(this, listaE);
                    listaL = Data.leerTransicionesLambda(this, listaE);
                    automata = new AFND(inicial, listaE, listaT, listaL);
                    labelArchivo.setText("Autómata cargado: AFND");
                    break;
            }
        } catch (Exception e) {
            //mensaje de error cuando algún input no es válido
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonOpcion1ActionPerformed

    /**
     * Introducir un autómata leyendo un archivo ".sm".
     *
     * @param evt Acción sobre el botón.
     */
    private void botonOpcion2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpcion2ActionPerformed
        try {
            //abrir popup para elegir el archivo
            JFileChooser fc = new JFileChooser();
            fc.setDialogTitle("Elegir un archivo .sm");
            FileNameExtensionFilter filter = new FileNameExtensionFilter(".sm", "sm");
            fc.setFileFilter(filter);
            int input = fc.showOpenDialog(this);
            //leer archivo
            if (input == JFileChooser.APPROVE_OPTION) {
                file = fc.getSelectedFile();
                fileName = file.getName();
                automata = Data.parsearSM(file);
                if (automata != null) {
                    labelArchivo.setText("Autómata cargado: " + fileName);
                } else {
                    throw new Exception();
                }
            }
        } catch (Exception e) {
            //mensaje de error cuando el archivo no es válido
            JOptionPane.showMessageDialog(this, "Archivo no válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonOpcion2ActionPerformed

    /**
     * Introducir una cadena para reconocer".
     *
     * @param evt Acción sobre el botón.
     */
    private void botonOpcion3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpcion3ActionPerformed
        try {
            Object input = JOptionPane.showInputDialog(this,
                    "Cadena:", "Introducir una cadena", JOptionPane.QUESTION_MESSAGE);
            if (input != null) {
                String s = String.valueOf(input);
                if (s.length() <= 20) { //longitud máxima 20
                    cadena = s;
                    labelCadena.setText("Cadena cargada: '" + cadena + "'");
                } else {
                    throw new Exception();
                }
            }
        } catch (Exception e) {
            //mensaje de error cuando la cadena no es válida
            JOptionPane.showMessageDialog(this, "Cadena no válida.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonOpcion3ActionPerformed

    /**
     * Reconocer la cadena mediante el autómata de una vez.
     *
     * @param evt Acción sobre el botón.
     */
    private void botonOpcion4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpcion4ActionPerformed
        try {
            if (automata == null) {
                throw new Exception("No hay ningún autómata cargado.");
            }
            if (cadena == null) {
                throw new Exception("No hay ninguna cadena cargada.");
            }
            //reconocer cadena
            boolean reconocida = automata.reconocer(cadena);
            String mensaje;
            if (reconocida) {
                mensaje = "Cadena '" + cadena + "' aceptada";
            } else {
                mensaje = "Cadena '" + cadena + "' rechazada";
            }
            //crear grafo
            VisualizationViewer<String, String> grafo = null;
            switch (automata.getTipo()) {
                case 0:
                    grafo = GrafoAFD.crear(Menu.automata);
                    break;
                case 1:
                    grafo = GrafoAFND.crear(Menu.automata);
                    break;
            }
            //crear el JFrame y mostrar el grafo
            JFrame frame = new JFrame(fileName);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(grafo);
            frame.setBounds(600, 50, 800, 800);
            frame.setVisible(true);
            //popup que informa sobre el reconocimiento de la cadena
            JOptionPane.showMessageDialog(this, mensaje, "Reconocer cadena", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            //mensaje de aviso cuando no hay autómata/cadena
            JOptionPane.showMessageDialog(this, e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_botonOpcion4ActionPerformed

    /**
     * Reconocer la cadena mediante el autómata paso a paso.
     *
     * @param evt Acción sobre el botón.
     */
    private void botonOpcion5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpcion5ActionPerformed
        try {
            if (automata == null) {
                throw new Exception("No hay ningún autómata cargado.");
            }
            if (cadena == null) {
                throw new Exception("No hay ninguna cadena cargada.");
            }
            //abrir frame Opcion5
            Opcion5 f = new Opcion5(automata, cadena);
            f.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            f.setBounds(100, 300, 500, 240);
            f.setTitle("Paso a paso");
            f.setVisible(true);
        } catch (Exception e) {
            //mensaje de aviso cuando no hay autómata/cadena
            JOptionPane.showMessageDialog(this, e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_botonOpcion5ActionPerformed

    /**
     * Método principal para mostrar el menú.
     *
     * @param args Argumentos.
     */
    public static void main(String args[]) {
        Menu m = new Menu();
        m.setDefaultCloseOperation(EXIT_ON_CLOSE);
        m.setBounds(200, 200, 370, 450);
        m.setTitle("AMC - Práctica 2");
        m.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonOpcion1;
    private javax.swing.JButton botonOpcion2;
    private javax.swing.JButton botonOpcion3;
    private javax.swing.JButton botonOpcion4;
    private javax.swing.JButton botonOpcion5;
    private javax.swing.JLabel labelArchivo;
    private javax.swing.JLabel labelCadena;
    private javax.swing.JLabel labelTitulo;
    // End of variables declaration//GEN-END:variables
}
